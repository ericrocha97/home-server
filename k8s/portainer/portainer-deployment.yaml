apiVersion: v1
kind: Namespace
metadata:
  name: tools
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: portainer
  namespace: tools
  labels:
    app: portainer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: portainer
  template:
    metadata:
      labels:
        app: portainer
    spec:
      serviceAccountName: portainer-sa
      containers:
        - name: portainer
          image: portainer/portainer-ce:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9000
          args:
            - "--admin-password-file=/run/secrets/portainer/password"
            - "--host=unix:///var/run/docker.sock"
          volumeMounts:
            - name: data
              mountPath: /data
            - name: docker-sock
              mountPath: /var/run/docker.sock
            - name: docker-volumes
              mountPath: /var/lib/docker/volumes
              # RW para permitir operações completas sobre volumes
              readOnly: false
            - name: portainer-admin-pass
              mountPath: /run/secrets/portainer
              readOnly: true
          resources:
            requests:
              cpu: 50m
              memory: 128Mi
            limits:
              cpu: 300m
              memory: 512Mi
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: portainer-data
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
            type: Socket
        - name: docker-volumes
          hostPath:
            path: /var/lib/docker/volumes
            type: Directory
        - name: portainer-admin-pass
          secret:
            secretName: portainer-admin-password
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: portainer-data
  namespace: tools
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName: local-path
---
apiVersion: v1
kind: Service
metadata:
  name: portainer
  namespace: tools
  labels:
    app: portainer
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9000"
    prometheus.io/path: "/api/system/metrics"
spec:
  selector:
    app: portainer
  ports:
    - name: http
      port: 9000
      targetPort: 9000
  type: ClusterIP
---
# Exponha externamente via NodePort ou Ingress. Aqui um NodePort simples.
apiVersion: v1
kind: Service
metadata:
  name: portainer-nodeport
  namespace: tools
spec:
  type: NodePort
  selector:
    app: portainer
  ports:
    - port: 9000
      targetPort: 9000
      nodePort: 30900
